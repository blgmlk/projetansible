---
- name: préparation de rebout sanitaire du server malikapache
  hosts: malikapache
  gather_facts: yes
  vars_files:
    - files/secret/credentials.yaml
  become: yes
 
  tasks:
  - name: check l'état des services installés
    tags: result
    service_facts:
  
  - name: afficher les services selectionnés
    debug:
      var: ansible_facts.services[serviceToDisplay]
    loop: "{{ disable_services}}"
    loop_control:
      loop_var: serviceToDisplay
    vars:
      disable_services:
        - apache2
        - mysql

  - name: Stop and Disable service if it is running or enabled
    tags: result
    systemd:
      name: "{{ ansible_facts.services[serviceToDisable]['name'] }}"
      enabled: no
      state: stopped
    when:
      - serviceToDisable is defined
      - ansible_facts.services[serviceToDisable]['state'] == 'running'
    loop: "{{ disable_services }}"
    loop_control:
      loop_var: serviceToDisable
    vars:
      disable_services:
        - apache2
        - mysql
#====================================================

- name: préparation de reboot sanitaire du server malikaftp
  hosts: malikaftp
  gather_facts: yes
  vars_files:
    - files/secret/credentials.yaml
  become: yes
 
  tasks:
  - name: check l'état des services installés 
    service_facts:
  
  - name: afficher les services selectionnés
    debug:
      var: ansible_facts.services[serviceToDisplay]
    loop: "{{ disable_services}}"
    loop_control:
      loop_var: serviceToDisplay
    vars:
      disable_services:
        - haproxy
        - vsftpd      
  
  - name: Stop and Disable service if it is running or enabled
    systemd:
      name: "{{ ansible_facts.services[serviceToDisable]['name'] }}"
      enabled: no
      state: stopped
    when:
      - serviceToDisable is defined
      - ansible_facts.services[serviceToDisable]['state'] =='running'
    loop: "{{ disable_services }}"
    loop_control:
      loop_var: serviceToDisable
    vars:
      disable_services:
        - haproxy
        - vsftpd

#==============================================================

- name: Reboot  sanitaire des serveurs

  hosts: servers
  #gather_facts: no
  remote_user: malikablg
  become: true
  vars_files:
    - files/secret/credentials.yaml  
  tags: reboot
  tasks:
  - name: Check the uptime
    shell: uptime
    register: UPTIME_PRE_REBOOT
  - name: test
    debug: msg="{{UPTIME_PRE_REBOOT.stdout}}"
    
  - name: Reboot the machine (Wait for 5 min)
    reboot:
      reboot_timeout: 300

  - name: Check the uptime after reboot
    shell: uptime
    register: UPTIME_POST_REBOOT
  - name: test2
    debug: msg="{{UPTIME_POST_REBOOT.stdout}}"
    
  #=====================================================================
- name: Restrted les services  après le rebout sanitaire du server malikapache
  hosts: malikapache
  gather_facts: yes
  vars_files:
    - files/secret/credentials.yaml
  become: yes
 
  tasks:
  - name: check l'état des services installés
    tags: refaire
    service_facts:
  
  - name: afficher les services selectionnés
    tags: refaire
    debug:
      var: ansible_facts.services[serviceToDisplay]
    loop: "{{ enable_services}}"
    loop_control:
      loop_var: serviceToDisplay
    vars:
      enable_services:
        - apache2
        - mysql

  - name: Start and Enable service if it is stopped or Disabled
    tags: refaire
    systemd:
      name: "{{ ansible_facts.services[serviceToEnable]['name'] }}"
      enabled: yes
      state: started
    when:
      - serviceToEnable is defined
      - ansible_facts.services[serviceToEnable]['state'] == 'stopped'
    loop: "{{ enable_services }}"
    loop_control:
      loop_var: serviceToEnable
    vars:
      enable_services:
        - apache2
        - mysql

#=================================================================
- name: Restrted les services  après le rebout sanitaire du server malikaftp
  hosts: malikaftp
  gather_facts: yes
  vars_files:
    - files/secret/credentials.yaml   
  become: yes
  tasks:
  - name: check l'état des services installés
    tags: refaire
    service_facts:
  
  - name: afficher les services selectionnés
    debug:
      var: ansible_facts.services[serviceToDisplay]
    loop: "{{ enable_services}}"
    loop_control:
      loop_var: serviceToDisplay
    vars:
      enable_services:
        - haproxy
        - vsftpd

  - name: Start and Enable service if it is stopped or Disabled
    tags: refaire
    systemd:
      name: "{{ ansible_facts.services[serviceToEnable]['name'] }}"
      enabled: yes
      state: started
    when:
      - serviceToEnable is defined
      - ansible_facts.services[serviceToEnable]['state'] == 'stopped'
    loop: "{{ enable_services }}"
    loop_control:
      loop_var: serviceToEnable
    vars:
      enable_services:
        - haproxy
        - vsftpd